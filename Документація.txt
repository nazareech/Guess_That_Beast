"Guess That Beast" — це інтерактивна гра, створена з використанням **JavaFX**, яка надає можливість гравцям відгадувати назви тварин/мемів зі списку запропонованих варіантів. Проєкт підтримує систему життів, рівнів, очок, а також надає гравцям магазин для покращення прогресу в грі.
Метою гри є:
- Відгадувати назви мемів (тварин).
- Накопичувати очки.
- Прогресувати через рівні з поступовим відкриттям наступних.
- Керувати життями та покращувати їх через магазин.

## Основні компоненти проєкту
### 1. Головний клас `Main.java`
- Відповідає за запуск програми та ініціалізацію основного вікна гри.
- Використовує **JavaFX Application** для побудови UI.
- Підтримує налаштування вікна (розмір, розташування) через клас . `WindowStateManager`

### 2. Керування внутрішнім станом
Класи для зберігання та обробки статичних і динамічних даних гри:
- **`GameData`**:
    - Описує стан гравця (життя, очки, відкриті рівні).
    - Використовується для роботи з усіма ігровими механіками.

- **`GameStateManager`**:
    - Відповідає за збереження та завантаження стану гри у файл (використовується JSON).
    - Має шифрування даних для безпеки.

### 3. Робота з рівнями
- **`LevelController`**:
    - Управляє відображенням та логікою рівнів.
    - Завантажує зображення мемів і варіанти відповідей.
    - Обробляє правильні та неправильні відповіді, оновлює статистику рівня.

- **`UnlockingLevelsManager`**:
    - Розблоковує наступні рівні при досягненні умов (правильність відповідей понад 50%).

### 4. Робота з очками
- **`ScoreManager`**:
    - Розраховує очки за правильні відповіді.
    - Зберігає загальний рахунок гравця.
    - Забезпечує можливість додавання та віднімання очок.

### 5. Робота з життями
- **`LivesManager`**:
    - Управляє життями гравця (додавання/зняття).
    - Автоматично відновлює життя через часовий інтервал.
    - Контролює доступ до рівнів (гравцю потрібно мати хоча б одне життя для початку гри).

### 6. Магазин
- **`ShopController`**:
    - Надсилає запити на оновлення життів або придбання балів обміну.
    - Інтегрує механіку покупки з життями та очками гравця.
    - Має окремий метод для інтеграції пожертвувань.

### 7. Робота з мемами
- **`Meme`**:
    - Клас для зберігання інформації про меме (назва, зображення, варіанти відповідей, правильна відповідь).

- **`MemeLoader`**:
    - Завантажує меми із JSON-файлу.

### 8. Збереження та розташування вікна
- **`WindowStateManager`**:
    - Запам'ятовує розташування та розміри вікна для зручності користувача.
    - Встановлює ці параметри під час запуску програми.

### 9. Логіка результатів
- **`ResultsController`**:
    - Відображає результати рівня (правильні відповіді, кількість очок, час рівня).
    - Показує інформацію про розблокування нового рівня.

## Файли UI
Файли **FXML UI** створені для організації графічного інтерфейсу:
1. **`view-main-scene.fxml`** — головне меню гри.
2. **`view-level.fxml`** — UI для відображення рівня.
3. **`view-results.fxml`** — результати рівня.
4. **`view-shop.fxml`** — магазин для придбання життів та очок.

Файли також використовують CSS для стилізації елементів.
## JSON-файл
- **`memes.json`**:
    - Містить дані про меми (назва, шляхи до зображень, варіанти відповідей, правильна відповідь).

## Використані бібліотеки
1. **JavaFX** — розробка графічного інтерфейсу.
2. **Jackson Databind** — для роботи з JSON (збереження/завантаження стану гри, меми).
3. **Java Desktop** — функції роботи з системою (наприклад, клас ). `GameStateManager`

## Інструкція зі запуску
1. Завантажити або склонуйте репозиторій з проєктом.
2. Налаштуйте **Java SDK** (Java 23) у вашій **IDE**.
3. Запустіть для старту програми. `Main.java`

Сподіваюся, ця документація допоможе у використанні проєкту та його розширенні!
